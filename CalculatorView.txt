struct CalculatorView: View {
    @StateObject var viewModel = CalculatorViewModel()
    
    var body: some View {
        VStack {
            Text("\(viewModel.currentNumber)").font(.largeTitle)
                .frame(minWidth: 0, maxWidth: .infinity, minHeight: 0, maxHeight: .infinity, alignment: .bottomTrailing)
                .padding(.trailing, 20)
                .padding(.bottom, 20)
            
            LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 4), spacing: 10) {
                Button("C") {
                    viewModel.clearPressed()
                }.buttonStyle(CalculatorButtonStyle(color: .gray))
                
                Button("+/-") {
                    viewModel.signChange()
                }.buttonStyle(CalculatorButtonStyle(color: .gray))
                
                Button("%") {
                    viewModel.operationPressed(.percentage)
                }.buttonStyle(CalculatorButtonStyle(color: .gray))
                
                Button("/") {
                    viewModel.operationPressed(.division)
                }.buttonStyle(CalculatorButtonStyle(color: .orange))
                
                Button("7") {
                    viewModel.numberPressed(7)
                }.buttonStyle(CalculatorButtonStyle())
                
                Button("8") {
                    viewModel.numberPressed(8)
                }.buttonStyle(CalculatorButtonStyle())
                
                Button("9") {
                    viewModel.numberPressed(9)
                }.buttonStyle(CalculatorButtonStyle())
                
                Button("x") {
                    viewModel.operationPressed(.multiplication)
                }.buttonStyle(CalculatorButtonStyle(color: .orange))
                
                Button("4") {
                    viewModel.numberPressed(4)
                }.buttonStyle(CalculatorButtonStyle())
                
                Button("5") {
                    viewModel.numberPressed(5)
                }.buttonStyle(CalculatorButtonStyle())
                
                Button("6") {
                    viewModel.numberPressed(6)
                }.buttonStyle(CalculatorButtonStyle())
                
                Button("-") {
                    viewModel.operationPressed(.subtraction)
                }.buttonStyle(CalculatorButtonStyle(color: .orange))
                
                Button("1") {
                    viewModel.numberPressed(1)
                }.buttonStyle(CalculatorButtonStyle())
                
                Button("2") {
                    viewModel.numberPressed(2)
                }.buttonStyle(CalculatorButtonStyle())
                
                Button("3") {
                    viewModel.numberPressed(3)
                }.buttonStyle(CalculatorButtonStyle())
                
                Button("+") {
                    viewModel.operationPressed(.addition)
                }.buttonStyle(CalculatorButtonStyle(color: .orange))
                
                Button("0") {
                    viewModel.numberPressed(0)
                }.frame(maxWidth: .infinity)
                .buttonStyle(CalculatorButtonStyle())
                
                Button(".") {
                    viewModel.decimalPressed()
                }.buttonStyle(CalculatorButtonStyle())
                
                Button("=") {
                    viewModel.equalsPressed()
                }.buttonStyle(CalculatorButtonStyle(color: .orange))
            }.padding(.horizontal)
        }
    }
}

struct CalculatorButtonStyle: ButtonStyle {
    var color = Color("CalculatorButtonColor")
    
    func makeBody(configuration: Configuration) -> some View {
        configuration.label
            .font(.system(size: 32))
            .frame(maxWidth: .infinity, maxHeight: .infinity)
            .background(color)
            .foregroundColor(.white)
            .cornerRadius(10)
            .padding(5)
            .scaleEffect(configuration.isPressed ? 0.95 : 1)
    }
}
